rx_find("cie")
word_list[str_detect(word_list,ie_rule)]
words[str_detect(word_list,ie_rule)]
words[str_detect(words,ie_rule)]
ev_rule <-rx() %>%
rx_find("cie")
words[str_detect(words,ev_rule)]
cellnum <- c("879-154-7908", "135.484.7895","13547984587")
str_view(cellnum,"\\d{3}-\\d{3}-\\d{4}|\\d{3}.\\d{3}.\\d{4}")
telrx <- rx() %>%
rx_start_of_line() %>%
rx_digit() %>%
rx_repeat_previous(3) %>%
rx_any_of("-.") %>%
rx_digit() %>%
rx_repeat_previous(3) %>%
rx_any_of("-.") %>%
rx_digit() %>%
rx_repeat_previous(4) %>%
rx_end_of_line()
str_view(cellnum, telrx)
library(tidyverse)
library(ggplot2)
library(fs)
library(purrr)
library(stringr)
train <- read.csv("./data/train.csv",stringsAsFactors = FALSE)
## read data
```{r}
train <- read.csv("./data/train.csv",stringsAsFactors = FALSE)
test <- read.csv("./data/test.csv", stringsAsFactors = FALSE)
View(train)
str(train)
dim(train)
na.omit(train)
df <- read_csv("./data/BostonHousing.csv")
df <- read_csv("./data/BostonHousing.csv")
map(col_uni(df),length)
df <- read_csv("./data/BostonHousing.csv")
library(tidyverse)
library(ggplot2)
library(fs)
library(purrr)
library(stringr)
df <- read_csv("./data/BostonHousing.csv")
#for check how many unique values for each var.
col_uni <- function(df){
map(df,unique)
}
dim(train)
dim(df)
str(df)
summary(df)
map(col_uni(df),length)
dim(df)
str(df)
summary(df)
dim(df)
str(df)
summary(df)
dim(df)
str(df)
summary(df)
dim(df)
str(df)
summary(df)
dim(df)
str(df)
summary(df)
is.na(df)
sum(is.na(df))
library(assertr)
names(df)
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
sum(is.na(df)) # check how many missing values in our dataset
df %>% # check the limit (based on description on the kaggle) for each variable
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
df %>% # check the limit (based on description on the kaggle) for each variable
assert(in_set(c(1, 0)), chas)
df %>%
assert(in_set(c(1, 0)), chas)
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)
sum(is.na(df)) # check how many missing values in our dataset
# check the limit (based on description on the kaggle) for each variable
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox)
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b)
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat) %>%
sum(is.na(df)) # check how many missing values in our dataset
# check how many missing values in our dataset
sum(is.na(df))
# check the limit (based on description on the kaggle) for each variable
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat)
map(col_uni(df),length)
df %>%
group_by(chas)
tofactor <- function(df,var){
df %>%
mutate(as.factor(var))
}
tofactor(df,var = c(rad,chas))
tofactor <- function(df,var){
df %>%
mutate(as.factor({{var}}))
}
tofactor(df,var = c(rad,chas))
tofactor(df,var = rad)
tofactor <- function(df,var){
df %>%
mutate(paste0(var,fc) = as.factor({{var}}))
tofactor <- function(df,var,newname){
df %>%
mutate(paste0(var,fc) = as.factor({{var}}))
tofactor <- function(df,var,newname){
df %>%
mutate(newname = as.factor({{var}}))
}
tofactor(df,var = rad, rad_fc)
tofactor <- function(df,var,newname){
df %>%
mutate({{newname}} = as.factor({{var}}))
tofactor <- function(df,var,newname){
df %>%
mutate({newname} = as.factor({{var}}))
tofactor <- function(df,var,newname){
df %>%
mutate(newname = as.factor({{var}}))
}
tofactor(df,var = rad, newname =  rad_fc)
radtofactor <- function(df,var,rad_fc){
df %>%
mutate(newname = as.factor({{var}}))
}
tofactor(df,var = rad)
names(df)
radtofactor <- function(df,var){
df %>%
mutate(rad_fc = as.factor({{var}}))
}
df <- radtofactor(df,var = rad)
chastofactor <- function(df,var){
df %>%
mutate(chas_fc = as.factor({{var}}))
}
df <- chastofactor(df,var = chas)
names(df)
assert(df$chas)
is.factor(df$chas)
is.factor(df$chas_fc)
is.factor(df$rad_fc)
tofactor <- function(df,var){
tofactor <- function(df,var){
tofactor <- function(df,var){
tofactor <- function(df,var){
df %>%
mutate_at(var)
}
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fc = as.factor()))
}
tofactor(df,c(rad,chas))
f
{}
)
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fc = as.factor()))
}
tofactor(df,c(rad,chas))
tofactor <- function(df,var){
df %>%
mutate_at({{var}}, list(fc = as.factor()))
}
tofactor(df,c(rad,chas))
tofactor <- function(df,var){
df %>%
mutate_at({{var}}, list(fc = as.factor()))
}
tofactor(df,c(rad,chas))
tofactor(df,c("rad","chas"))
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fc = as.factor()))
}
tofactor(df,c("rad","chas"))
o
tofactor <- function(df,var){
tof <- function(x) (as.factor(x))
tof
)
tof <- function(x) (as.factor(x))
tof(f)
tof(3)
tofactor <- function(df,var){
)
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fc = tof)
}
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fc = tof))
}
tofactor(df,c("rad","chas"))
tofactor(df,c("rad","chas"))
df %>%
mutate_at(c("rad","chas"), list(fc = tof))
library(tidyverse)
library(ggplot2)
library(fs)
library(purrr)
library(stringr)
library(assertr)
df <- read_csv("./data/BostonHousing.csv")
#for check how many unique values for each var.
col_uni <- function(df){
map(df,unique)
}
dim(df)
str(df)
summary(df)
# check how many missing values in our dataset
sum(is.na(df))
# check the limit (based on description on the kaggle) for each variable
df %>%
assert(in_set(c(1, 0)), chas)%>%
assert(in_set(c(0:24)), rad)%>%
assert(within_bounds(0,1), nox) %>%
assert(within_bounds(0,100), zn)%>%
assert(within_bounds(0,100), crim)%>%
assert(within_bounds(0,Inf),indus)%>%
assert(within_bounds(0,120), age) %>%
assert(within_bounds(0,Inf), dis) %>%
assert(within_bounds(0,100), ptratio) %>%
assert(within_bounds(0,Inf), tax) %>%
assert(within_bounds(0,Inf), medv) %>%
assert(within_bounds(0,Inf), b) %>%
assert(within_bounds(0,100), lstat)
map(col_uni(df),length)
map(col_uni(df),length)
tof <- function(x) (as.factor(x))
tofactor <- function(df,var){
df %>%
mutate_at(var, list(fc = tof))
}
df <- tofactor(df,c("rad","chas"))
#test
is.factor(df$chas_fc)
is.factor(df$rad_fc)
dfstd <- function(df,var){
df %>%
mutate_at(var, list(std = scale2))
}
names(df)
df <- dfstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm = na.rm)
dfstd <- function(df,var){
df %>%
mutate_at(var, list(std = scale2))
}
df <- dfstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
names(df)
#test
df %>%
select(contains("_std"),everything())
summary(df$ptratio)
15 < 5
15 <= 15
cutptratio <- function(x){
if(x <= 17.4){
x = "low"
}else{
if(x >= 20.2){
x = "high"
}else{
x = "Median"
}
}
}
df$ptratio_cut <- cutptratio(df$ptratio)
head(df)
df
View(df)
for(i in 1:506)
for (i in 1:506) {
df$ptratio_cut[i] <- cutptratio(df$ptratio[i])
}
df$ptratio_cut
col_uni(df$ptratio)
unique(df$ptratio_cut)
library(caret)
dfstd <- function(df,var){
if (! var %in% names(df)) {
stop("`data` must containing `time_spend_company`")
}
df %>%
mutate_at(var, list(std = scale2))
}
df <- dfstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
dfstd <- function(df,var){
df %>%
mutate_at(var, list(std = scale2))
}
df <- dfstd(df,var = c("crim" ,"zn","indus","nox", "rm", "age", "dis","tax","ptratio", "b", "lstat", "medv"))
summary(df$crim)
crime_level <- function(df) {
df %>%
mutate(crim_level = case_when(
crim <= 0.09 ~ "low",
crim <= 3.7 ~"medium",
TRUE ~ "high"
))
}
df <- ccrime_level(df)
df <- crime_level(df)
#test
unique(df$crim_level)
set.seed(2019)
trainIndex <- createDataPartition(df$medv, p = .75)
df_tr <- df[trainIndex,]
trainIndex <- createDataPartition(df$medv, p = .75, list = FALSE)
df_tr <- df[trainIndex,]
df_test <- df[-trainIndex,]
map(col_uni(df),length)
library(tidyverse)
library(ggplot2)
library(fs)
library(purrr)
library(stringr)
library(assertr)
library(caret)
map(col_uni(df),length)
map(col_uni(df),length)
col_uni <- function(df){
map(df,unique)
}
map(col_uni(df),length)
